// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: someuser.proto

package someuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SomeUser_CreateUser_FullMethodName     = "/proto.SomeUser/CreateUser"
	SomeUser_GetAllUsers_FullMethodName    = "/proto.SomeUser/GetAllUsers"
	SomeUser_GetUserByID_FullMethodName    = "/proto.SomeUser/GetUserByID"
	SomeUser_DeleteUserByID_FullMethodName = "/proto.SomeUser/DeleteUserByID"
	SomeUser_UpdateUser_FullMethodName     = "/proto.SomeUser/UpdateUser"
)

// SomeUserClient is the client API for SomeUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomeUserClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	GetUserByID(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	DeleteUserByID(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type someUserClient struct {
	cc grpc.ClientConnInterface
}

func NewSomeUserClient(cc grpc.ClientConnInterface) SomeUserClient {
	return &someUserClient{cc}
}

func (c *someUserClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SomeUser_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *someUserClient) GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, SomeUser_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *someUserClient) GetUserByID(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SomeUser_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *someUserClient) DeleteUserByID(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, SomeUser_DeleteUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *someUserClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SomeUser_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomeUserServer is the server API for SomeUser service.
// All implementations must embed UnimplementedSomeUserServer
// for forward compatibility.
type SomeUserServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetAllUsers(context.Context, *emptypb.Empty) (*GetAllUsersResponse, error)
	GetUserByID(context.Context, *UserIDRequest) (*CreateUserResponse, error)
	DeleteUserByID(context.Context, *UserIDRequest) (*MessageResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedSomeUserServer()
}

// UnimplementedSomeUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSomeUserServer struct{}

func (UnimplementedSomeUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSomeUserServer) GetAllUsers(context.Context, *emptypb.Empty) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedSomeUserServer) GetUserByID(context.Context, *UserIDRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedSomeUserServer) DeleteUserByID(context.Context, *UserIDRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByID not implemented")
}
func (UnimplementedSomeUserServer) UpdateUser(context.Context, *UpdateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSomeUserServer) mustEmbedUnimplementedSomeUserServer() {}
func (UnimplementedSomeUserServer) testEmbeddedByValue()                  {}

// UnsafeSomeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomeUserServer will
// result in compilation errors.
type UnsafeSomeUserServer interface {
	mustEmbedUnimplementedSomeUserServer()
}

func RegisterSomeUserServer(s grpc.ServiceRegistrar, srv SomeUserServer) {
	// If the following call pancis, it indicates UnimplementedSomeUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SomeUser_ServiceDesc, srv)
}

func _SomeUser_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeUserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeUser_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeUserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomeUser_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeUserServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeUser_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeUserServer).GetAllUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomeUser_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeUserServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeUser_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeUserServer).GetUserByID(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomeUser_DeleteUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeUserServer).DeleteUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeUser_DeleteUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeUserServer).DeleteUserByID(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomeUser_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeUserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeUser_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeUserServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SomeUser_ServiceDesc is the grpc.ServiceDesc for SomeUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomeUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SomeUser",
	HandlerType: (*SomeUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _SomeUser_CreateUser_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _SomeUser_GetAllUsers_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _SomeUser_GetUserByID_Handler,
		},
		{
			MethodName: "DeleteUserByID",
			Handler:    _SomeUser_DeleteUserByID_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SomeUser_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "someuser.proto",
}
